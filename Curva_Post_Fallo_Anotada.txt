
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# === PARÁMETROS ===
fy = 4200
Es = 2.1e6
fc = 250
lw = 30
N_imp = 120000
n_fibras = 200
εu = 0.02
εcu = 0.0035

xj_steel = np.array([5, 17.5, 30, 42.5, 55])
n_1 = np.array([3, 2, 2, 2, 3])
diam_1 = np.array([22, 22, 22, 22, 22])
As = (np.pi / 4) * ((diam_1 / 10)**2) * n_1

x_inicio = np.array([0.0])
x_fin = np.array([30.0])
bj = np.array([60.0])
largo = x_fin - x_inicio
xj_conc = x_inicio + largo / 2
Aj = largo * bj
bloques = [{
    "x_inicio": x_inicio[i],
    "x_fin": x_fin[i],
    "xj [cm]": xj_conc[i],
    "b [cm]": bj[i],
    "largo [cm]": largo[i],
    "Aj [cm²]": Aj[i]
} for i in range(len(x_inicio))]

Ag = np.sum(Aj)
Ast = np.sum(As)
fcAjxj = np.sum([b["Aj [cm²]"] * b["xj [cm]"] * 0.85 * fc for b in bloques])
Asfyxj = np.sum(As * xj_steel * fy)
denom = 0.85 * fc * Ag + Ast * fy
xp = (fcAjxj + Asfyxj) / denom

# === FUNCIONES ===

def sigma_acero_realista(es, Es, fy, ey=None, esu=0.01, ef=0.02):
    if ey is None:
        ey = fy / Es
    abs_es = abs(es)
    if abs_es <= ey:
        return Es * es
    elif abs_es <= esu:
        return fy * np.sign(es)
    elif abs_es <= ef:
        degradacion = fy * (1 - (abs_es - esu) / (ef - esu))
        return degradacion * np.sign(es)
    else:
        return 0

def sigma_hormigon(ec, fc, eo=0.002, ecu=0.003, ec_max=0.008):
    if ec <= 0:
        return 0
    elif ec <= eo:
        return fc * (2 * ec / eo - (ec / eo)**2)
    elif ec <= ecu:
        return fc
    elif ec <= ec_max:
        return fc * (1 - 0.8 * (ec - ecu) / (ec_max - ecu))
    else:
        return 0

def calcular_Cj(phi, c):
    dx = lw / n_fibras
    Cj, Mj = [], []
    for i in range(n_fibras):
        xj = dx * (i + 0.5)
        Aj_fibra = bj[0] * dx
        eci = -phi * (xj - c)
        fc_i = sigma_hormigon(eci, fc)
        C = Aj_fibra * fc_i
        M = C * (xp - xj)
        Cj.append(C)
        Mj.append(M)
    return np.array(Cj), np.array(Mj)

# === MODELO ===

def modelo_completo_post_fallo(ec_list):
    resultados = []
    for ec in ec_list:
        try:
            c_min, c_max = 0.1, lw
            mejor_phi = None
            mejor_M = None
            for _ in range(200):
                c = (c_min + c_max) / 2
                phi = ec / c
                Tj = np.array([
                    Asj * sigma_acero_realista(phi * (xj - c), Es, fy)
                    for xj, Asj in zip(xj_steel, As)
                ])
                Cj, _ = calcular_Cj(phi, c)
                equilibrio = np.sum(Cj) - np.sum(Tj)
                if abs(equilibrio - N_imp) < 1e-3:
                    mejor_phi = phi
                    dx = lw / n_fibras
                    xj_fibra = np.array([dx * (i + 0.5) for i in range(n_fibras)])
                    Mj_T = -Tj * (xp - xj_steel)
                    Mj_C = Cj * (xp - xj_fibra)
                    mejor_M = np.sum(Mj_T) + np.sum(Mj_C)
                    break
                if equilibrio < N_imp:
                    c_min = c
                else:
                    c_max = c

            εs = [phi * (xj - c) for xj in xj_steel]
            ec_max = max([-phi * (xj - c) for xj in np.linspace(0, lw, n_fibras)])
            falla = any(abs(e) >= εu for e in εs) or ec_max >= εcu
            resultados.append((ec, mejor_phi, mejor_M, falla))
        except:
            continue
    return pd.DataFrame(resultados, columns=["εc", "Curvatura φ", "Momento M", "Falla"])

# === EJECUCIÓN Y GRÁFICO ===

ec_list = np.linspace(0.0001, 0.05, 400)
df = modelo_completo_post_fallo(ec_list)

plt.figure(figsize=(9, 5))
df_pre = df[df["Falla"] == False]
df_post = df[df["Falla"] == True]

plt.plot(df_pre["Curvatura φ"], df_pre["Momento M"], label="Antes del fallo", color="blue")
plt.plot(df_post["Curvatura φ"], df_post["Momento M"], label="Después del fallo", color="red", linestyle="--")
plt.scatter(df_post["Curvatura φ"].iloc[0], df_post["Momento M"].iloc[0], color="black", zorder=5, label="Inicio del fallo")

plt.xlabel("Curvatura φ [1/cm]")
plt.ylabel("Momento M [kgf·cm]")
plt.title("Curva M–φ completa con zona post-fallo")
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()
